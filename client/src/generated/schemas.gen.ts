// This file is auto-generated by @hey-api/openapi-ts

export const CreateSessionRequestSchema = {
    properties: {
        session_id: {
            type: 'string',
            title: 'Session Id'
        },
        policy_path: {
            type: 'string',
            title: 'Policy Path'
        },
        camera_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Camera Names',
            default: ['front']
        },
        arena_server_url: {
            type: 'string',
            title: 'Arena Server Url',
            default: 'http://localhost:8000'
        },
        workspace_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Workspace Id'
        },
        policy_type: {
            type: 'string',
            title: 'Policy Type',
            default: 'act'
        },
        language_instruction: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Language Instruction'
        }
    },
    type: 'object',
    required: ['session_id', 'policy_path'],
    title: 'CreateSessionRequest'
} as const;

export const CreateSessionResponseSchema = {
    properties: {
        workspace_id: {
            type: 'string',
            title: 'Workspace Id'
        },
        camera_room_ids: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Camera Room Ids'
        },
        joint_input_room_id: {
            type: 'string',
            title: 'Joint Input Room Id'
        },
        joint_output_room_id: {
            type: 'string',
            title: 'Joint Output Room Id'
        }
    },
    type: 'object',
    required: ['workspace_id', 'camera_room_ids', 'joint_input_room_id', 'joint_output_room_id'],
    title: 'CreateSessionResponse'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const SessionStatusResponseSchema = {
    properties: {
        session_id: {
            type: 'string',
            title: 'Session Id'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        policy_path: {
            type: 'string',
            title: 'Policy Path'
        },
        policy_type: {
            type: 'string',
            title: 'Policy Type'
        },
        camera_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Camera Names'
        },
        workspace_id: {
            type: 'string',
            title: 'Workspace Id'
        },
        rooms: {
            additionalProperties: true,
            type: 'object',
            title: 'Rooms'
        },
        stats: {
            additionalProperties: true,
            type: 'object',
            title: 'Stats'
        },
        inference_stats: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inference Stats'
        },
        error_message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error Message'
        }
    },
    type: 'object',
    required: ['session_id', 'status', 'policy_path', 'policy_type', 'camera_names', 'workspace_id', 'rooms', 'stats'],
    title: 'SessionStatusResponse'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;